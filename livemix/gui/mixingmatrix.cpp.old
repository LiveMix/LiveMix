/*
    Copyright 2004 - 2007 Arnold Krille <arnold@arnoldarts.de>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    version 2 of the License.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.

*/

#include "mixingmatrix.h"
#include "mixingmatrix.moc"

#include "LadspaFXProperties.h"
#include "LadspaFXSelector.h"

#include <QtCore/QMetaProperty>
#include <QtCore/QDebug>
#include <QtCore/QTimer>
#include <QtGui/QRubberBand>
#include <QtGui/QLayout>
#include <QtGui/QListWidget>
#include <QtGui/QPushButton>
#include <QtGui/QMenu>
#include <QtGui/QAction>
#include <QtGui/QCursor>
#include <QtGui/QContextMenuEvent>
#include <QtGui/QLabel>
#include <QtGui/QSpacerItem>
//#include <QtGui/QScrollArea>

namespace JackMix {

Widget::Widget( JackMix::BackendInterface* backend, QWidget* p, const char* n )
	: QWidget( p )
//	, _mode( Normal )
	, _backend( backend )
{
	QVBoxLayout *main_layout = new QVBoxLayout;
	main_layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Minimum, QSizePolicy::Expanding));
//	QScrollArea *effectScrollArea = new QScrollArea( NULL );
//	effectScrollArea->setFrameShape( QFrame::NoFrame );
//	effectScrollArea->setVerticalScrollBarPolicy( Qt::ScrollBarAlwaysOff );
//	effectScrollArea->setHorizontalScrollBarPolicy( Qt::ScrollBarAlwaysOn );
//	QWidget* effect = new QWidget;
//	main_layout->addWidget(effectScrollArea);
//	effectScrollArea->setWidget( effect );
//	main_layout->addWidget(effect);
//	QScrollArea *mix_mainScrollArea = new QScrollArea( NULL );
//	mix_mainScrollArea->setFrameShape( QFrame::NoFrame );
//	mix_mainScrollArea->setVerticalScrollBarPolicy( Qt::ScrollBarAlwaysOff );
//	mix_mainScrollArea->setHorizontalScrollBarPolicy( Qt::ScrollBarAlwaysOn );
	QWidget* mix_main = new QWidget;
//	mix_mainScrollArea->setWidget( mix_main );
//	main_layout->addWidget(mix_mainScrollArea);
	main_layout->addWidget(mix_main);
	QWidget* status = new QWidget;
	main_layout->addWidget(status);
	this->setLayout(main_layout);
	
//	QHBoxLayout *status_layout = new QHBoxLayout;
//	status->setLayout(status_layout);
//	status_layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Expanding, QSizePolicy::Minimum));
//	status_LCD = new LCDDisplay(NULL, LCDDigit::LARGE_GRAY, 30, true); 
//	status_layout->addWidget(status_LCD);
//	cpuLoad = new CpuLoadWidget(0);
//	status_layout->addWidget(cpuLoad);
//	status.setColor( QPalette::Background, QColor( 128, 134, 152 ) );

#ifdef LADSPA_SUPPORT
/*	effect_layout = new QHBoxLayout;
	effect->setLayout(effect_layout);
	QWidget* effect_start = new QWidget();
	effect_layout->addWidget(effect_start); 
	QVBoxLayout *effect_start_layout = new QVBoxLayout;
	effect_start->setLayout(effect_start_layout);
	Button* select = Button::create();
	connect(select, SIGNAL( clicked() ), this, SLOT( addFX() ) );
	effect_start_layout->addWidget(select);
	effectName = new FaderName();
	effect_start_layout->addWidget(effectName);
	effect_start_layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Minimum, QSizePolicy::Expanding));
	select->setToolTip(trUtf8("All effect"));
//	TODO effect
	effect_layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Expanding, QSizePolicy::Minimum));*/
#endif

	QHBoxLayout *mix_layout = new QHBoxLayout;
	mix_main->setLayout(mix_layout); 
	mix_layout->setSpacing(0);
	mix_layout->setMargin(0);	
	QWidget *in = new QWidget;
	mix_layout->addWidget(in);
	mix_layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Expanding, QSizePolicy::Minimum));
	QWidget *pre = new QWidget;
	mix_layout->addWidget(pre);
	QWidget *post = new QWidget;
	mix_layout->addWidget(post);
	QWidget *sub = new QWidget;
	mix_layout->addWidget(sub);
	main_widget = new MainWidget(_backend, NULL);
	mix_layout->addWidget(main_widget);

	in_layout = new QHBoxLayout;
	pre_layout = new QHBoxLayout;
	post_layout = new QHBoxLayout;
	sub_layout = new QHBoxLayout;
	in_layout->setSpacing(0);
	pre_layout->setSpacing(0);
	post_layout->setSpacing(0);
	sub_layout->setSpacing(0);
	in_layout->setMargin(0);
	pre_layout->setMargin(0);
	post_layout->setMargin(0);
	sub_layout->setMargin(0);	
	in->setLayout(in_layout); 
	pre->setLayout(pre_layout); 
	post->setLayout(post_layout); 
	sub->setLayout(sub_layout);
	
	connect( _backend, SIGNAL( processed() ), this, SLOT( update() ) );
}

Widget::~Widget() {
}

void Widget::addFX() {
#ifdef LADSPA_SUPPORT
	LadspaFX* fx = LadspaFXProperties::getFXSelector(NULL, _backend);
	if (fx != NULL) {
		struct effect* elem = NULL; 
		switch (selectType) {
			case IN: {
				elem = _backend->addInEffect(selectChannel, fx);
				break;
			}
			case OUT: {
				elem = _backend->addOutEffect(selectChannel, fx);
				break;
			}
			case PRE: {
				elem = _backend->addPreEffect(selectChannel, fx);
				break;
			}
			case POST: {
				elem = _backend->addPostEffect(selectChannel, fx);
				break;
			}
			case SUB: {
				elem = _backend->addSubEffect(selectChannel, fx);
				break;
			}
		}
	// TODO update effect.
	}
#endif	
}
void Widget::select(Widget::TargetType type, QString channel) {
	selectType = type;
	selectChannel = channel;
	
	effectName->setText(channel);
	// TODO update effect.
}

void Widget::update() {
	foreach (QString in_name, _backend->inchannels()) {
		if (in[in_name] != NULL) {
			Fader* fader = in[in_name]->fader;
			fader->setDbPeak_L(_backend->getInPeak(in_name, true));
			fader->setDbPeak_R(_backend->getInPeak(in_name, false));
		}
	}
	foreach (QString pre_name, _backend->prechannels()) {
		if (pre[pre_name] != NULL) {
			Fader* fader = pre[pre_name]->fader;
			fader->setDbPeak_L(_backend->getPrePeak(pre_name, true));
			fader->setDbPeak_R(_backend->getPrePeak(pre_name, false));
		}
	}
	foreach (QString post_name, _backend->postchannels()) {
		if (post[post_name] != NULL) {
			Fader* fader = post[post_name]->fader;
			fader->setDbPeak_L(_backend->getPostPeak(post_name, true));
			fader->setDbPeak_R(_backend->getPostPeak(post_name, false));
		}
	}
	foreach (QString sub_name, _backend->subchannels()) {
		if (sub[sub_name] != NULL) {
			Fader* fader = sub[sub_name]->fader;
			fader->setDbPeak_L(_backend->getSubPeak(sub_name, true));
			fader->setDbPeak_R(_backend->getSubPeak(sub_name, false));
		}
	}
	main_widget->fader->setDbPeak_L(_backend->getOutPeak(MAIN, true));
	main_widget->fader->setDbPeak_R(_backend->getOutPeak(MAIN, false));
}
void Widget::init() {
	for (QListIterator<QString> in_iter(_backend->inchannels()) ; in_iter.hasNext() ; ) {
		QString in_name = in_iter.next();
		addinchannel( in_name, false );
	}
	for (QListIterator<QString> iter(_backend->prechannels()) ; iter.hasNext() ; ) {
		QString name = iter.next();
		addprechannel( name );
	}
	for (QListIterator<QString> iter(_backend->postchannels()) ; iter.hasNext() ; ) {
		QString name = iter.next();
		addpostchannel( name, false );
	}
	for (QListIterator<QString> iter(_backend->subchannels()) ; iter.hasNext() ; ) {
		QString name = iter.next();
		addsubchannel( name );
	}
}

void Widget::addinchannel( QString name, bool related ) {
	InWidget* elem = new InWidget(_backend, name);
	in_layout->addWidget(elem);
	in[name] = elem;
qDebug() << 111;

	if (related) {
		QMapIterator<QString, PreWidget *> iter_pre(pre);
	 	while (iter_pre.hasNext()) {
	 		iter_pre.next();
	     	elem->addPre(_backend, name, iter_pre.key());
		}

		QMapIterator<QString, PostWidget *> iter_post(post);
	 	while (iter_post.hasNext()) {
	 		iter_post.next();
	     	elem->addPost(_backend, name, iter_post.key());
		}

		QMapIterator<QString, SubWidget *> iter_sub(sub);
	 	while (iter_sub.hasNext()) {
	 		iter_sub.next();
	     	elem->addSub(_backend, name, iter_sub.key());
		}
	}
}
void Widget::addprechannel( QString name ) {
	PreWidget* elem = new PreWidget(_backend, name);
	pre_layout->addWidget(elem);
	pre[name] = elem;
	
	QMapIterator<QString, InWidget *> iter(in);
 	while (iter.hasNext()) {
 		iter.next();
     	iter.value()->addPre(_backend, iter.key(), name);
	}
}
void Widget::addpostchannel( QString name, bool related ) {
	PostWidget* elem = new PostWidget(_backend, name);
	post_layout->addWidget(elem);
	post[name] = elem;
	
	QMapIterator<QString, InWidget *> iter(in);
 	while (iter.hasNext()) {
 		iter.next();
		iter.value()->addPost(_backend, iter.key(), name);
	}

	if (related) {
		QMapIterator<QString, SubWidget *> iter(sub);
	 	while (iter.hasNext()) {
	 		iter.next();
	     	elem->addSub(_backend, name, iter.key());
		}
	}
}
void Widget::addsubchannel( QString name ) {
	SubWidget* elem = new SubWidget(_backend, name);
	sub_layout->addWidget(elem);
	sub[name] = elem;
	
	QMapIterator<QString, InWidget *> iter_in(in);
 	while (iter_in.hasNext()) {
 		iter_in.next();
		iter_in.value()->addSub(_backend, iter_in.key(), name);
	}
	QMapIterator<QString, PostWidget *> iter_post(post);
 	while (iter_post.hasNext()) {
 		iter_post.next();
		iter_post.value()->addSub(_backend, iter_post.key(), name);
	}
}
void Widget::removeinchannel( QString name ) {
	InWidget *elem = in[name];
	in_layout->removeWidget(elem);
	in.remove(name);
	delete elem;
}
void Widget::removeprechannel( QString name ) {
	PreWidget *elem = pre[name];
	pre_layout->removeWidget(elem);
	pre.remove(name);
	delete elem;
	
 	for (QMap<QString, InWidget*>::iterator i = in.begin() ; i != in.end() ; ++i) {
		i.value()->removePre(_backend, i.key(), name);
	}
}
void Widget::removepostchannel( QString name ) {
	PostWidget *elem = post[name];
	post_layout->removeWidget(elem);
	post.remove(name);
	delete elem;
	
 	for (QMap<QString, InWidget*>::iterator i = in.begin() ; i != in.end() ; ++i) {
		i.value()->removePost(_backend, i.key(), name);
	}
}
void Widget::removesubchannel( QString name ) {
	SubWidget *elem = sub[name];
	sub_layout->removeWidget(elem);
	sub.remove(name);
	delete elem;
	
 	for (QMap<QString, InWidget*>::iterator i = in.begin() ; i != in.end() ; ++i) {
		i.value()->removeSub(_backend, i.key(), name);
	}
 	for (QMap<QString, PostWidget*>::iterator i = post.begin() ; i != post.end() ; ++i) {
		i.value()->removeSub(_backend, i.key(), name);
	}
}

InWidget::InWidget( BackendInterface* backend, QString channel ) : QWidjet()
, m_Channel(channel) {
	QVBoxLayout* layout = new QVBoxLayout;
	setLayout(layout);
	setFixedWidth(CHANNEL_WIDTH);
	layout->setSpacing(0);
	layout->setMargin(0);	

	layout->addWidget(new QLabel(channel));

	Rotary *gain = new Rotary(0, Rotary::TYPE_NORMAL, trUtf8("Gain"), false, true, channel);
	layout->addWidget(gain);
	connect(gain, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setInGain( QString, float ) ) );
	gain->setDbValue(backend->getInput(channel)->gain);
	
	ToggleButton* mute = ToggleButton::createSolo(0, channel);
	mute->setToolTip(trUtf8("mute"));
	layout->addWidget(mute);
	connect(mute, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setInMute( QString, bool ) ) );
	mute->setValue(backend->getInput(channel)->mute);

	ToggleButton* plf = ToggleButton::createSolo(0, channel);
	plf->setToolTip(trUtf8("plf"));
	layout->addWidget(plf);
	connect(plf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setInPlf( QString, bool ) ) );
	plf->setValue(backend->getInput(channel)->plf);
	
	addLine(layout);

	wPre = new QWidget;
	lPre = new QVBoxLayout;
	lPre->setSpacing(0);
	lPre->setMargin(0);	
	wPre->setLayout(lPre);
	layout->addWidget(wPre);
	lPre->addWidget(new QLabel(trUtf8("Pre")));
	addLine(layout);
	
	wPost = new QWidget;
	lPost = new QVBoxLayout;
	lPost->setSpacing(0);
	lPost->setMargin(0);	
	wPost->setLayout(lPost);
	layout->addWidget(wPost);
	lPost->addWidget(new QLabel(trUtf8("Post")));
	addLine(layout);
	
	wSub = new QWidget;
	lSub = new QVBoxLayout;
	lSub->setSpacing(0);
	lSub->setMargin(0);	
	wSub->setLayout(lSub);
	layout->addWidget(wSub);
	lSub->addWidget(new QLabel(trUtf8("Sub")));
	addLine(layout);
	
	Rotary *bal = new Rotary(0, Rotary::TYPE_CENTER, backend->getInput(channel)->stereo ? trUtf8("Bal") :  trUtf8("Pan"), false, true, channel);
	layout->addWidget(bal);
	connect(bal, SIGNAL( valueChanged(QString, float) ), backend, SLOT( setInBal( QString, float ) ) );
	bal->setValue(backend->getInput(channel)->bal);
	
	ToggleButton* main_on = ToggleButton::createMute(0, channel);
	main_on->setToolTip(trUtf8("Main"));
	layout->addWidget(main_on);
	connect(main_on, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setInMain( QString, bool ) ) );
	main_on->setValue(backend->getInput(channel)->main);
	
	fader = new Fader(0, false, false, channel);
	fader->setFixedSize( 23, 232 );
	layout->addWidget(fader);
	connect(fader, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setInVolume( QString, float ) ) );
	fader->setDbValue(backend->getInput(channel)->volume);
}
InWidget::~InWidget() {
}
void InWidget::mouseReleaseEvent(QMouseEvent* ev)
{
	if (ev->button() == Qt::LeftButton) {
		emit clicked(Widget::IN, m_Channel);
	}
}
void InWidget::addPre(BackendInterface* backend, QString channelIn, QString channelPre) {
	Rotary *elem = new Rotary(0, Rotary::TYPE_NORMAL, channelPre, false, true, channelIn, channelPre);
	lPre->addWidget(elem);
	pre[channelPre] = elem;
	connect(elem, SIGNAL( dbValueChanged(QString, QString, float) ), backend, SLOT( setInPreVolume( QString, QString, float ) ) );
	elem->setDbValue(backend->getInput(channelIn)->pre[channelPre]);
}
void InWidget::addPost(BackendInterface* backend, QString channelIn, QString channelPost) {
	Rotary *elem = new Rotary(0, Rotary::TYPE_NORMAL, channelPost, false, true, channelIn, channelPost);
	lPost->addWidget(elem);
	post[channelPost] = elem;
	connect(elem, SIGNAL( dbValueChanged(QString, QString, float) ), backend, SLOT( setInPostVolume( QString, QString, float ) ) );
	elem->setDbValue(backend->getInput(channelIn)->post[channelPost]);
}
void InWidget::addSub(BackendInterface* backend, QString channelIn, QString channelSub) {
	ToggleButton* elem = ToggleButton::create(NULL, channelIn, channelSub);
	elem->setToolTip(channelSub);
	lSub->addWidget(elem);
	sub[channelSub] = elem;
	connect(elem, SIGNAL( valueChanged(QString, QString, bool) ), backend, SLOT( setInSub( QString, QString, bool ) ) );
	elem->setValue(backend->getInput(channelIn)->sub[channelSub]);
}
void InWidget::removePre(BackendInterface* backend, QString channelIn, QString channelPre) {
	Rotary *elem = pre[channelPre];
	lPre->removeWidget(elem);
	pre.remove(channelPre);
	delete elem;
}
void InWidget::removePost(BackendInterface* backend, QString channelIn, QString channelPost) {
	Rotary *elem = post[channelPost];
	lPost->removeWidget(elem);
	post.remove(channelPost);
	delete elem;
}
void InWidget::removeSub(BackendInterface* backend, QString channelIn, QString channelSub) {
	ToggleButton *elem = sub[channelSub];
	lSub->removeWidget(elem);
	sub.remove(channelSub);
	delete elem;
}

PreWidget::PreWidget( BackendInterface* backend, QString channel )
: m_Channel(channel) {
	QVBoxLayout* layout = new QVBoxLayout;
	setLayout(layout);
	setFixedWidth(CHANNEL_WIDTH);
	layout->setSpacing(0);
	layout->setMargin(0);	

	layout->addWidget(new QLabel(channel));

	ToggleButton* mute = ToggleButton::createSolo(0, channel);
	mute->setToolTip(trUtf8("mute"));
	layout->addWidget(mute);
	connect(mute, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPreMute( QString, bool ) ) );
	mute->setValue(backend->getPre(channel)->mute);

	ToggleButton* alf = ToggleButton::createSolo(0, channel);
	alf->setToolTip("alf");
	layout->addWidget(alf);
	connect(alf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPreAlf( QString, bool ) ) );
	alf->setValue(backend->getPre(channel)->alf);

	addSpacer(layout);

	if (backend->getPre(channel)->stereo) {
		Rotary *bal = new Rotary(0, Rotary::TYPE_CENTER, trUtf8("Bal"), false, true, channel);
		layout->addWidget(bal);
		connect(bal, SIGNAL( valueChanged(QString, float) ), backend, SLOT( setPreBal( QString, float ) ) );
		bal->setValue(backend->getPre(channel)->bal);
	}
	
	fader = new Fader(0, false, false, channel);
	fader->setFixedSize( 23, 232 );
	layout->addWidget(fader);
	connect(fader, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setPreVolume( QString, float ) ) );
	fader->setDbValue(backend->getPre(channel)->volume);
}
PreWidget::~PreWidget() {
}
void PreWidget::mouseReleaseEvent(QMouseEvent* ev)
{
	if (ev->button() == Qt::LeftButton) {
		emit clicked(Widget::PRE, m_Channel);
	}
}
PostWidget::PostWidget( BackendInterface* backend, QString channel )
: m_Channel(channel) {
	QVBoxLayout* layout = new QVBoxLayout;
	setLayout(layout);
	setFixedWidth(CHANNEL_WIDTH);
	layout->setSpacing(0);
	layout->setMargin(0);	

	layout->addWidget(new QLabel(channel));

	Rotary *prevol = new Rotary(0, Rotary::TYPE_NORMAL, trUtf8("Volume"), false, true, channel);
	layout->addWidget(prevol);
	connect(prevol, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setPostPreVolume( QString, float ) ) );
	prevol->setDbValue(backend->getPost(channel)->prevolume);

	ToggleButton* mute = ToggleButton::createSolo(0, channel);
	mute->setToolTip(trUtf8("mute"));
	layout->addWidget(mute);
	connect(mute, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPostMute( QString, bool ) ) );
	mute->setValue(backend->getPost(channel)->mute);

	ToggleButton* alf = ToggleButton::createSolo(0, channel);
	alf->setToolTip(trUtf8("alf"));
	layout->addWidget(alf);
	connect(alf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPostAlf( QString, bool ) ) );
	alf->setValue(backend->getPost(channel)->alf);
	addLine(layout, true);

	addSpacer(layout);

	layout->addWidget(new QLabel(trUtf8("Return")));
	ToggleButton* plf = ToggleButton::createSolo(0, channel);
	plf->setToolTip(trUtf8("plf"));
	layout->addWidget(plf);
	connect(plf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPostPlf( QString, bool ) ) );
	plf->setValue(backend->getPost(channel)->plf);

	wSub = new QWidget;
	lSub = new QVBoxLayout;
	lSub->setSpacing(0);
	lSub->setMargin(0);	
	wSub->setLayout(lSub);
	layout->addWidget(wSub);
	lSub->addWidget(new QLabel(trUtf8("Sub")));
	addLine(layout);
	
	Rotary *bal = new Rotary(0, Rotary::TYPE_CENTER, backend->getPost(channel)->stereo ? trUtf8("Bal") : trUtf8("Pan"), false, true, channel);
	layout->addWidget(bal);
	connect(bal, SIGNAL( valueChanged(QString, float) ), backend, SLOT( setPostBal( QString, float ) ) );
	bal->setValue(backend->getPost(channel)->bal);
	
	ToggleButton* main_on = ToggleButton::createMute(0, channel);
	main_on->setToolTip(trUtf8("Main"));
	layout->addWidget(main_on);
	connect(main_on, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setPostMain( QString, bool ) ) );
	main_on->setValue(backend->getPost(channel)->main);

	fader = new Fader(0, false, false, channel);
	fader->setFixedSize( 23, 232 );
	layout->addWidget(fader);
	connect(fader, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setPostPostVolume( QString, float ) ) );
	fader->setDbValue(backend->getPost(channel)->postvolume);
}
PostWidget::~PostWidget() {
}
void PostWidget::mouseReleaseEvent(QMouseEvent* ev)
{
	if (ev->button() == Qt::LeftButton) {
		emit clicked(Widget::POST, m_Channel);
	}
}
void PostWidget::addSub(BackendInterface* backend, QString channelPost, QString channelSub) {
	ToggleButton* elem = ToggleButton::create(0, channelPost, channelSub);
	elem->setToolTip(channelSub);
	lSub->addWidget(elem);
	sub[channelSub] = elem;
	connect(elem, SIGNAL( valueChanged(QString, QString, bool) ), backend, SLOT( setPostSub( QString, QString, bool ) ) );
	elem->setValue(backend->getPost(channelPost)->sub[channelSub]);
}
void PostWidget::removeSub(BackendInterface* backend, QString channelIn, QString channelSub) {
	ToggleButton *elem = sub[channelSub];
	lSub->removeWidget(elem);
	sub.remove(channelSub);
	delete elem;
}

SubWidget::SubWidget( BackendInterface* backend, QString channel )
: m_Channel(channel) {
	QVBoxLayout* layout = new QVBoxLayout;
	setLayout(layout);
	setFixedWidth(CHANNEL_WIDTH);
	layout->setSpacing(0);
	layout->setMargin(0);	

	layout->addWidget(new QLabel(channel));

	ToggleButton* mute = ToggleButton::createSolo(0, channel);
	mute->setToolTip(trUtf8("mute"));
	layout->addWidget(mute);
	connect(mute, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setSubMute( QString, bool ) ) );
	mute->setValue(backend->getSub(channel)->mute);

	ToggleButton* alf = ToggleButton::createSolo(0, channel);
	alf->setToolTip(trUtf8("alf"));
	layout->addWidget(alf);
	connect(alf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setSubAlf( QString, bool ) ) );
	alf->setValue(backend->getSub(channel)->alf);

	addSpacer(layout);

	Rotary *bal = new Rotary(0, Rotary::TYPE_CENTER, backend->getSub(channel)->stereo ? trUtf8("Bal") : trUtf8("Pan"), false, true, channel);
	layout->addWidget(bal);
	connect(bal, SIGNAL( valueChanged(QString, float) ), backend, SLOT( setSubBal( QString, float ) ) );
	bal->setValue(backend->getSub(channel)->bal);
	
	ToggleButton* main_on = ToggleButton::createMute(0, channel);
	main_on->setToolTip(trUtf8("Main"));
	layout->addWidget(main_on);
	connect(main_on, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setSubMain( QString, bool ) ) );
	main_on->setValue(backend->getSub(channel)->main);

	fader = new Fader(0, false, false, channel);
	fader->setFixedSize( 23, 232 );
	layout->addWidget(fader);
	connect(fader, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setSubVolume( QString, float ) ) );
	fader->setDbValue(backend->getSub(channel)->volume);
}
SubWidget::~SubWidget() {
}
void SubWidget::mouseReleaseEvent(QMouseEvent* ev)
{
	if (ev->button() == Qt::LeftButton) {
		emit clicked(Widget::SUB, m_Channel);
	}
}

MainWidget::MainWidget( BackendInterface* backend, QWidget* p ) : QWidget(p) {
	QVBoxLayout* layout = new QVBoxLayout;	
	setLayout(layout);
	setFixedWidth(CHANNEL_WIDTH);
	layout->setSpacing(0);
	layout->setMargin(0);	

	layout->addWidget(new QLabel(trUtf8("Phone")));

	Rotary *phone = new Rotary(0, Rotary::TYPE_NORMAL, trUtf8("Phone volume"), false, true, PLF);
	layout->addWidget(phone);
	connect(phone, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setOutVolume( QString, float ) ) );
	phone->setDbValue(backend->getOutput(PLF)->volume);

	addSpacer(layout);
	layout->addWidget(new QLabel(trUtf8("Main")));

	ToggleButton* mute = ToggleButton::createSolo(0, MAIN);
	mute->setToolTip(trUtf8("mute"));
	layout->addWidget(mute);
	connect(mute, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setOutMute( QString, bool ) ) );
	mute->setValue(backend->getOutput(MAIN)->mute);
	addLine(layout);

	Rotary *mono = new Rotary(0, Rotary::TYPE_NORMAL, trUtf8("Mono volume"), false, true, MONO);
	layout->addWidget(mono);
	connect(mono, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setOutVolume( QString, float ) ) );
	mono->setDbValue(backend->getOutput(MONO)->volume);
	addLine(layout);

	Rotary *bal = new Rotary(0, Rotary::TYPE_CENTER, trUtf8("Bal"), false, true, MAIN);
	layout->addWidget(bal);
	connect(bal, SIGNAL( valueChanged(QString, float) ), backend, SLOT( setOutBal( QString, float ) ) );
	bal->setValue(backend->getOutput(MAIN)->bal);
	
	ToggleButton* alf = ToggleButton::createSolo(0, MAIN);
	alf->setToolTip(trUtf8("alf"));
	layout->addWidget(alf);
	connect(alf, SIGNAL( valueChanged(QString, bool) ), backend, SLOT( setOutAlf( QString, bool ) ) );
	alf->setValue(backend->getOutput(MAIN)->alf);

	fader = new Fader(0, false, false, MAIN);
	fader->setFixedSize( 23, 232 );
	layout->addWidget(fader);
	connect(fader, SIGNAL( dbValueChanged(QString, float) ), backend, SLOT( setOutVolume( QString, float ) ) );
	fader->setDbValue(backend->getOutput(MAIN)->volume);
}
MainWidget::~MainWidget() {
}
void MainWidget::mouseReleaseEvent(QMouseEvent* ev)
{
	if (ev->button() == Qt::LeftButton) {
qDebug() << 222;
		emit clicked(Widget::OUT, MAIN);
	}
}

void addLine(QVBoxLayout* layout, bool bold) {
/*	QFrame* line = new QFrame();
	line->setFrameShape(QFrame::HLine);
	line->setFrameStyle(QFrame::Raised);
	layout->addWidget(line);*/
	QWidget* line = new QWidget;
	QPalette defaultPalette;
	defaultPalette.setColor( QPalette::Background, QColor( 128, 134, 152 ) );
	line->setPalette( defaultPalette );
	line->setFixedSize(CHANNEL_WIDTH, bold ? 3 : 2);
//	line->setMinimumSize(CHANNEL_WIDTH, bold ? 3 : 2);
	layout->addWidget(line);
}

void addLine(QHBoxLayout* layout, bool bold) {
	QWidget* line = new QWidget;
	QPalette defaultPalette;
	defaultPalette.setColor( QPalette::Background, QColor( 128, 134, 152 ) );
	line->setPalette( defaultPalette );
	line->setFixedSize(bold ? 3 : 2, bold ? 3 : 2);
//	line->setMinimumSize(bold ? 3 : 2, bold ? 3 : 2);
	layout->addWidget(line);
}

void addSpacer(QVBoxLayout* layout) {
	layout->addItem(new QSpacerItem(0, 0, QSizePolicy::Minimum, QSizePolicy::Expanding));
}

}; //JackMix
