/*
    Copyright 2004 - 2007 Arnold Krille <arnold@arnoldarts.de>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation;
    version 2 of the License.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.

*/

#ifndef MIXINGMATRIX_H
#define MIXINGMATRIX_H

#include <QtGui/QWidget>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtGui/QMenu>
#include <QtGui/QAction>
#include <QtGui/QVBoxLayout>

#include "backend_interface.h"
#include "Rotary.h"
#include "Fader.h"
#include "FaderName.h"
#include "Button.h"
#include "ClickableLabel.h"
#include "CpuLoadWidget.h"

#if ( QT_POINTER_SIZE == 8 )
#define pint qint64
#else
#define pint qint32
#endif

namespace JackMix {

class InWidget;
class PreWidget;
class PostWidget;
class SubWidget;
class MainWidget;

#define CHANNEL_WIDTH 50

//typedef enum TargetType; 

class Widget : public QWidget
{
Q_OBJECT

public:

	enum TargetType {IN, OUT, PRE, POST, SUB};

	// \param inchannels, outchannels, backend, parent, name=0
	Widget( JackMix::BackendInterface*, QWidget*, const char* =0 );
	~Widget();

	JackMix::BackendInterface* backend() const { return _backend; }

	/// New input/output channels
	void addinchannel( QString, bool related =true );
	void addprechannel( QString );
	void addpostchannel( QString, bool related =true );
	void addsubchannel( QString );
	/// Remove input/output channels
	void removeinchannel( QString );
	void removeprechannel( QString );
	void removepostchannel( QString );
	void removesubchannel( QString );

	/// Create Controls
	// Create controls. return true on success
	bool createControl();

	/// Layout
	QSize sizeHint() const { return minimumSizeHint(); }

	/// Mode
//	enum Mode { Normal, Select };
//	Mode mode() const { return _mode; }
//	void mode( Mode n ) { _mode=n; }

public slots:
	// Fills the empty nodes with 1to1-controls
	void init();
	void update();
	void select(TargetType, QString channel);
	void addFX();

private:
	enum TargetType selectType;
	QString selectChannel;
	
	QList<struct effect*> visibleEffect;
	FaderName *effectName;

//	enum Mode _mode;
	JackMix::BackendInterface* _backend;

	QHBoxLayout *effect_layout;

	QHBoxLayout *in_layout;
	QHBoxLayout *pre_layout;
	QHBoxLayout *post_layout;
	QHBoxLayout *sub_layout;

	QMap<QString, InWidget*> in;
	QMap<QString, PreWidget*> pre;
	QMap<QString, PostWidget*> post;
	QMap<QString, SubWidget*> sub;
	MainWidget* main_widget;

	LCDDisplay* status_LCD; 
	CpuLoadWidget *cpuLoad;
};

class InWidget : public QWidget
{
Q_OBJECT
public:
	InWidget( BackendInterface*, QString channel );
	~InWidget();
	
	void addPre(BackendInterface*, QString channelIn, QString channelPre);
	void addPost(BackendInterface*, QString channelIn, QString channelPre);
	void addSub(BackendInterface*, QString channelIn, QString channelPre);

	void removePre(BackendInterface*, QString channelIn, QString channelPre);
	void removePost(BackendInterface*, QString channelIn, QString channelPost);
	void removeSub(BackendInterface*, QString channelIn, QString channelSub);

	Fader* fader;

	void mouseReleaseEvent(QMouseEvent* ev);

signals:
	void clicked(Widget::TargetType, QString channel);
	
private:
	QString m_Channel; 
	
	QWidget* wPre;
	QWidget* wPost;
	QWidget* wSub;

	QVBoxLayout* lPre; 
	QVBoxLayout* lPost; 
	QVBoxLayout* lSub; 

	QMap<QString, Rotary*> pre;
	QMap<QString, Rotary*> post;
	QMap<QString, ToggleButton*> sub;
};

class PreWidget : public QWidget
{
Q_OBJECT
public:
	PreWidget( BackendInterface*, QString channel );
	~PreWidget();

	Fader* fader;

	void mouseReleaseEvent(QMouseEvent* ev);

signals:
	void clicked(Widget::TargetType, QString channel);
	
private:
	QString m_Channel; 
};

class PostWidget : public QWidget
{
Q_OBJECT
public:
	PostWidget( BackendInterface*, QString channel );
	~PostWidget();

	void addSub(BackendInterface*, QString channelPost, QString channelSub);
	void removeSub(BackendInterface*, QString channelIn, QString channelSub);

	Fader* fader;

	void mouseReleaseEvent(QMouseEvent* ev);

signals:
	void clicked(Widget::TargetType, QString channel);
	
private:
	QString m_Channel; 
	
	QWidget* wSub;
	QVBoxLayout* lSub; 
	QMap<QString, ToggleButton*> sub;
};

class SubWidget : public QWidget
{
Q_OBJECT
public:
	SubWidget( BackendInterface*, QString channel );
	~SubWidget();

	Fader* fader;

	void mouseReleaseEvent(QMouseEvent* ev);

signals:
	void clicked(Widget::TargetType, QString channel);
	
private:
	QString m_Channel; 
};

class MainWidget : public QWidget
{
Q_OBJECT
public:
	MainWidget( BackendInterface*, QWidget* p );
	~MainWidget();

	Fader* fader;

	void mouseReleaseEvent(QMouseEvent* ev);

signals:
	void clicked(Widget::TargetType, QString channel);
};

void addLine(QVBoxLayout*, bool bold =false);
void addLine(QHBoxLayout*, bool bold =false);
void addSpacer(QVBoxLayout*);

}; // JackMix

#endif // MIXINGMATRIX_H
